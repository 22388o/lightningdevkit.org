(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{62:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return l}));var a=t(3),i=t(7),r=(t(0),t(88)),o={id:"key_mgmt",title:"Key Management"},s={unversionedId:"key_mgmt",id:"key_mgmt",isDocsHomePage:!1,title:"Key Management",description:"Relevant reference: Rust docs",source:"@site/docs/key_mgmt.md",slug:"/key_mgmt",permalink:"/docs/key_mgmt",editUrl:"https://github.com/lightningdevkit/lightningdevkit.org/tree/main/docs/key_mgmt.md",version:"current",sidebar:"someSidebar",previous:{title:"Using LDK",permalink:"/docs/using_ldk"},next:{title:"Blockchain Data",permalink:"/docs/blockdata"}},c=[],p={toc:c};function l(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Relevant reference: ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.rs/lightning/*/lightning/chain/keysinterface/struct.KeysManager.html"}),"Rust docs")),Object(r.b)("p",null,"LDK Private Key Information is primarily provided through the ",Object(r.b)("inlineCode",{parentName:"p"},"chain::keysinterface::KeysInterface")," trait. It includes a few basic methods to get public and private key information, as well as a method to get an instance of a second trait which provides per-channel information - ",Object(r.b)("inlineCode",{parentName:"p"},"chain::keysinterface::ChannelKeys"),". While a custom ",Object(r.b)("inlineCode",{parentName:"p"},"KeysInterface")," implementation allows simple flexibility to control derivation of private keys, ",Object(r.b)("inlineCode",{parentName:"p"},"ChannelKeys")," focuses on signing lightning transactions and is primarily useful if you want to store private key material on a separate device which enforces lightning protocol details."),Object(r.b)("p",null,"A simple implementation of ",Object(r.b)("inlineCode",{parentName:"p"},"KeysInterface")," is provided in the form of ",Object(r.b)("inlineCode",{parentName:"p"},"chain::keysinterface::KeysManager"),", see its documentation for more details on its key derivation. It uses ",Object(r.b)("inlineCode",{parentName:"p"},"chain::keysinterface::InMemoryChannelKeys")," for channel signing, which is likely an appropriate signer for custom ",Object(r.b)("inlineCode",{parentName:"p"},"KeysInterface")," implementations as well."),Object(r.b)("p",null,"A ",Object(r.b)("inlineCode",{parentName:"p"},"KeysManager")," can be constructed simply with only a 32-byte seed and some integers which ensure uniqueness across restarts (defined as ",Object(r.b)("inlineCode",{parentName:"p"},"starting_time_secs")," and ",Object(r.b)("inlineCode",{parentName:"p"},"starting_time_nanos"),")."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),"let mut random_32_bytes = [0; 32];\n// Fill in random_32_bytes with secure random data, or, on restart, reload the seed from disk.\nlet start_time = SystemTime::now().duration_since(SystemTime::UNIX_EPOCH).unwrap();\nlet keys_interface_impl = lightning::chain::keysinterface::KeysManager::new(random_32-bytes, start_time.as_secs(), start_time.subsec_nanos());\n")),Object(r.b)("h1",{id:"spending-on-chain-funds"},"Spending On-Chain Funds"),Object(r.b)("p",null,"When a channel has been closed and some outputs on chain are spendable only by us, LDK provides a ",Object(r.b)("inlineCode",{parentName:"p"},"util::events::Event::SpendableOutputs")," event in return from ",Object(r.b)("inlineCode",{parentName:"p"},"ChannelMonitor::get_and_clear_pending_events()"),". It contains a list of ",Object(r.b)("inlineCode",{parentName:"p"},"chain::keysinterface::SpendableOutputDescriptor")," objects which describe the output and provide all necessary information to spend it."),Object(r.b)("p",null,"If you're using ",Object(r.b)("inlineCode",{parentName:"p"},"KeysManager")," directly, a utility method is provided which can generate a signed transaction given a list of ",Object(r.b)("inlineCode",{parentName:"p"},"\nSpendableOutputDescriptor")," objects. ",Object(r.b)("inlineCode",{parentName:"p"},"KeysManager::spend_spendable_outputs")," can be called any time after receiving the ",Object(r.b)("inlineCode",{parentName:"p"},"SpendableOutputDescriptor")," objects to build a spending transaction, including delaying until sending funds to an external destination or opening a new channel. Note that if you open new channels directly with ",Object(r.b)("inlineCode",{parentName:"p"},"SpendableOutputDescriptor")," objects, you must ensure all closing/destination scripts provided to LDK are SegWit (either native or P2SH-wrapped)."),Object(r.b)("p",null,"If you are not using ",Object(r.b)("inlineCode",{parentName:"p"},"KeysManager")," for keys generation, you must re-derive the private keys yourself. Any ",Object(r.b)("inlineCode",{parentName:"p"},"BaseSign")," object must provide a unique id via the ",Object(r.b)("inlineCode",{parentName:"p"},"channel_keys_id")," function, whose value is provided back to you in the ",Object(r.b)("inlineCode",{parentName:"p"},"SpendableOutputs")," objects. A ",Object(r.b)("inlineCode",{parentName:"p"},"SpendableOutputDescriptor::StaticOutput")," element does not have this information as the output is sent to an output which used only ",Object(r.b)("inlineCode",{parentName:"p"},"KeysInterface")," data, not per-channel data."))}l.isMDXComponent=!0},88:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return m}));var a=t(0),i=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=i.a.createContext({}),l=function(e){var n=i.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=l(e.components);return i.a.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},b=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(t),b=a,m=d["".concat(o,".").concat(b)]||d[b]||u[b]||r;return t?i.a.createElement(m,s(s({ref:n},p),{},{components:t})):i.a.createElement(m,s({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=b;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<r;p++)o[p]=t[p];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);