(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{100:function(e,n,t){"use strict";var a=t(3),r=t(0),i=t.n(r);n.a=function({children:e,hidden:n,className:t}){return i.a.createElement("div",Object(a.a)({role:"tabpanel"},{hidden:n,className:t}),e)}},74:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return b})),t.d(n,"default",(function(){return d}));var a=t(3),r=t(7),i=(t(0),t(87)),o=t(99),c=t(100),l={id:"build_node",title:"Building a Node with LDK in Java"},s={unversionedId:"build_node",id:"build_node",isDocsHomePage:!1,title:"Building a Node with LDK in Java",description:"Introduction",source:"@site/docs/build_node.md",slug:"/build_node",permalink:"/docs/build_node",editUrl:"https://github.com/lightningdevkit/lightningdevkit.org/tree/main/docs/build_node.md",version:"current",sidebar:"someSidebar",previous:{title:"Use Cases for LDK",permalink:"/docs/use_cases"},next:{title:"Building a Node with LDK in Rust",permalink:"/docs/build_node_rust"}},b=[{value:"Introduction",id:"introduction",children:[]},{value:"Setup",id:"setup",children:[{value:"1. Initialize the <code>FeeEstimator</code>",id:"1-initialize-the-feeestimator",children:[]},{value:"2. Initialize the <code>Logger</code>",id:"2-initialize-the-logger",children:[]},{value:"3. Initialize the <code>BroadcasterInterface</code>",id:"3-initialize-the-broadcasterinterface",children:[]},{value:"4. Optional: Initialize the <code>NetGraphMsgHandler</code>",id:"4-optional-initialize-the-netgraphmsghandler",children:[]},{value:"5. Initialize <code>Persist</code>",id:"5-initialize-persist",children:[]},{value:"6. Initialize the <code>ChannelManagerPersister</code>",id:"6-initialize-the-channelmanagerpersister",children:[]},{value:"7. Optional: Initialize the Transaction <code>Filter</code>",id:"7-optional-initialize-the-transaction-filter",children:[]},{value:"8. Initialize the <code>ChainMonitor</code>",id:"8-initialize-the-chainmonitor",children:[]},{value:"9. Initialize the <code>KeysManager</code>",id:"9-initialize-the-keysmanager",children:[]},{value:"10. Read <code>ChannelMonitor</code>s from disk",id:"10-read-channelmonitors-from-disk",children:[]},{value:"11. Initialize the <code>ChannelManager</code>",id:"11-initialize-the-channelmanager",children:[]},{value:"12. Sync <code>ChannelMonitor</code>s and <code>ChannelManager</code> to chain tip",id:"12-sync-channelmonitors-and-channelmanager-to-chain-tip",children:[]},{value:"13. Optional: Bind a Listening Port",id:"13-optional-bind-a-listening-port",children:[]}]},{value:"Running LDK",id:"running-ldk",children:[{value:"14. Keep LDK Up-to-date with Chain Info",id:"14-keep-ldk-up-to-date-with-chain-info",children:[]}]},{value:"Using LDK",id:"using-ldk",children:[{value:"Opening a Channel",id:"opening-a-channel",children:[]},{value:"Closing a Channel",id:"closing-a-channel",children:[]},{value:"List Channels",id:"list-channels",children:[]},{value:"Receiving Payments",id:"receiving-payments",children:[]},{value:"Sending Payments",id:"sending-payments",children:[]},{value:"Connect to Peers",id:"connect-to-peers",children:[]},{value:"List Peers",id:"list-peers",children:[]}]}],p={toc:b};function d(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"introduction"},"Introduction"),Object(i.b)("p",null,"This document covers everything you need to make a node using LDK in Java."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#setup"}),"Setup")," covers everything you need to do to set up LDK on startup."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#running-ldk"}),"Running LDK")," covers everything you need to do while LDK is running to keep it operational."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#using-ldk"}),"Using LDK")," covers most lightning operations you'll want to use,\nsuch as opening a channel.")),Object(i.b)("p",null,"Note that LDK does not assume that safe shutdown is available, so there is no\nshutdown checklist."),Object(i.b)("h2",{id:"setup"},"Setup"),Object(i.b)("h3",{id:"1-initialize-the-feeestimator"},"1. Initialize the ",Object(i.b)("inlineCode",{parentName:"h3"},"FeeEstimator")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"What it's used for:")," estimating fees for on-chain transactions that LDK wants broadcasted."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"class YourFeeEstimator implements FeeEstimator.FeeEstimatorInterface {\n    @Override\n    public int get_est_sat_per_1000_weight(LDKConfirmationTarget conf_target) {\n        if (conf_target ==\n            LDKConfirmationTarget.LDKConfirmationTarget_Background) {\n            // <insert code to retrieve a background feerate>\n        } else if (conf_target ==\n            LDKConfirmationTarget.LDKConfirmationTarget_Normal) {\n            // <insert code to retrieve a normal (i.e. within ~6 blocks) feerate>\n        } else if (conf_target ==\n            LDKConfirmationTarget.LDKConfirmationTarget_HighPriority) {\n            // <insert code to retrieve a high-priority feerate>\n        }\n    }\n}\n\nFeeEstimator fee_estimator = FeeEstimator.new_impl(new YourFeeEstimator());\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Implementation notes:")," "),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Fees must be returned in: satoshis per 1000 weight units"),Object(i.b)("li",{parentName:"ol"},"Fees returned must be no smaller than 253 (equivalent to 1 satoshi/vbyte, rounded up)"),Object(i.b)("li",{parentName:"ol"},"To reduce network traffic, you may want to cache fee results rather than\nretrieving fresh ones every time")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Dependencies:")," ",Object(i.b)("em",{parentName:"p"},"none")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"References:")," ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.rs/lightning/*/lightning/chain/chaininterface/trait.FeeEstimator.html"}),"Rust docs"),", ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/lightningdevkit/ldk-garbagecollected/blob/main/src/main/java/org/ldk/structs/FeeEstimator.java"}),"Java bindings")),Object(i.b)("h3",{id:"2-initialize-the-logger"},"2. Initialize the ",Object(i.b)("inlineCode",{parentName:"h3"},"Logger")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"What it's used for:")," LDK logging"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"class YourLogger implements Logger.LoggerInterface {\n    @Override\n    public void log(String record) {\n        // <insert code to print this log and/or write this log to a file>\n    }\n}\n\nLogger logger = Logger.new_impl(new YourLogger());\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Implementation notes:")," you'll most likely want to write the logs to a file for debugging purposes."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Dependencies:")," ",Object(i.b)("em",{parentName:"p"},"none")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"References:")," ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.rs/lightning/*/lightning/util/logger/trait.Logger.html"}),"Rust docs"),", ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/lightningdevkit/ldk-garbagecollected/blob/main/src/main/java/org/ldk/structs/Logger.java"}),"Java bindings")),Object(i.b)("h3",{id:"3-initialize-the-broadcasterinterface"},"3. Initialize the ",Object(i.b)("inlineCode",{parentName:"h3"},"BroadcasterInterface")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"What it's used for:")," broadcasting various lightning transactions "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"class YourBroadcaster implements\n    BroadcasterInterface.BroadcasterInterfaceInterface {\n\n    @Override\n    public void broadcast_transaction(byte[] tx) {\n        // <insert code to broadcast the given transaction here>\n    }\n}\n\nBroadcasterInterface tx_broadcaster =\n    BroadcasterInterface.new_impl(new YourBroadcaster());\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Dependencies:")," ",Object(i.b)("em",{parentName:"p"},"none")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"References:")," ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.rs/lightning/*/lightning/chain/chaininterface/trait.BroadcasterInterface.html"}),"Rust docs"),", ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/lightningdevkit/ldk-garbagecollected/blob/main/src/main/java/org/ldk/structs/BroadcasterInterface.java"}),"Java bindings")),Object(i.b)("h3",{id:"4-optional-initialize-the-netgraphmsghandler"},"4. Optional: Initialize the ",Object(i.b)("inlineCode",{parentName:"h3"},"NetGraphMsgHandler")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"You must follow this step if:")," you need LDK to provide routes for sending payments (i.e. you are ",Object(i.b)("em",{parentName:"p"},"not")," providing your own routes)"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"What it's used for:")," generating routes to send payments over"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")," initializing ",Object(i.b)("inlineCode",{parentName:"p"},"NetGraphMsgHandler")," without providing an ",Object(i.b)("inlineCode",{parentName:"p"},"Access")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"final router = NetGraphMsgHandler.of(new byte[32], null, logger);\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Implementation notes:")," this struct is not required if you are providing your own routes."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Dependencies:")," ",Object(i.b)("inlineCode",{parentName:"p"},"Logger")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Optional dependency:")," ",Object(i.b)("inlineCode",{parentName:"p"},"Access"),", a source of chain information. Recommended to be able to verify channels before adding them to the internal network graph."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"References:")," ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.rs/lightning/*/lightning/routing/network_graph/struct.NetGraphMsgHandler.html"}),Object(i.b)("inlineCode",{parentName:"a"},"NetGraphMsgHandler")," Rust docs"),", ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/lightningdevkit/ldk-garbagecollected/blob/main/src/main/java/org/ldk/structs/NetGraphMsgHandler.java"}),Object(i.b)("inlineCode",{parentName:"a"},"NetGraphMsgHandler")," Java bindings"),", ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.rs/lightning/*/lightning/chain/trait.Access.html"}),Object(i.b)("inlineCode",{parentName:"a"},"Access")," Rust docs"),", ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/lightningdevkit/ldk-garbagecollected/blob/main/src/main/java/org/ldk/structs/Access.java"}),Object(i.b)("inlineCode",{parentName:"a"},"Access")," Java bindings")),Object(i.b)("h3",{id:"5-initialize-persist"},"5. Initialize ",Object(i.b)("inlineCode",{parentName:"h3"},"Persist")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"What it's used for:")," persisting crucial channel data in a timely manner"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"Persist persister = Persist.new_impl(new Persist.PersistInterface() {\n  @Override\n  public Result_NoneChannelMonitorUpdateErrZ persist_new_channel(OutPoint id, \n    ChannelMonitor data) {\n      byte[] channel_monitor_bytes = data.write();\n      // <insert code to write these bytes to disk, keyed by `id`>\n  }\n\n  @Override\n  public Result_NoneChannelMonitorUpdateErrZ update_persisted_channel(\n    OutPoint id, ChannelMonitorUpdate update, ChannelMonitor data) {\n      byte[] channel_monitor_bytes = data.write();\n      // <insert code to update the `ChannelMonitor`'s file on disk with these\n      //  new bytes, keyed by `id`>\n  }\n});\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Implementation notes:")," ",Object(i.b)("inlineCode",{parentName:"p"},"ChannelMonitor"),"s are objects which are capable of responding to on-chain\nevents for a given channel. Thus, you will have one ",Object(i.b)("inlineCode",{parentName:"p"},"ChannelMonitor")," per channel, identified by the\nfunding output ",Object(i.b)("inlineCode",{parentName:"p"},"id"),", above. They are persisted in real-time and the ",Object(i.b)("inlineCode",{parentName:"p"},"Persist")," methods will block\nprogress on sending or receiving payments until they return. You must ensure that\n",Object(i.b)("inlineCode",{parentName:"p"},"ChannelMonitor"),"s are durably persisted to disk before returning or you may lose funds."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Dependencies:")," ",Object(i.b)("em",{parentName:"p"},"none")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"References:")," ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.rs/lightning/*/lightning/chain/channelmonitor/trait.Persist.html"}),"Rust docs"),", ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/lightningdevkit/ldk-garbagecollected/blob/main/src/main/java/org/ldk/structs/Persist.java"}),"Java bindings")),Object(i.b)("h3",{id:"6-initialize-the-channelmanagerpersister"},"6. Initialize the ",Object(i.b)("inlineCode",{parentName:"h3"},"ChannelManagerPersister")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"What it's used for:")," (1) LDK produces events that must be handled by you,\nsuch as telling you when a payment has been successfully received or when a\nfunding transaction is ready for broadcast. (2) After new event(s) are handled,\nthe ",Object(i.b)("inlineCode",{parentName:"p"},"ChannelManager")," must be re-persisted to disk and/or backups."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"class YourObj implements ChannelManagerConstructor.ChannelManagerPersister {\n    @Override\n    public void handle_event(Event e) {\n        if (e instanceof Event.FundingGenerationReady) {\n            // <insert code to handle this event>\n        }\n        else if (e instanceof Event.PaymentReceived) {\n            // <insert code to handle this event>\n        }\n        else if (e instanceof Event.PaymentSent) {\n            // <insert code to handle this event>\n        }\n        else if (e instanceof Event.PaymentFailed) {\n            // <insert code to handle this event>\n        }\n        else if (e instanceof Event.PendingHTLCsForwardable) {\n            // <insert code to handle this event>\n        }\n        else if (e instanceof Event.SpendableOutputs) {\n            // <insert code to handle this event>\n        }\n    }\n    \n    @Override\n    public void persist_manager(byte[] channel_manager_bytes) {\n        // <insert code to persist channel_manager_bytes to disk and/or backups>\n    }\n}\n\nChannelManagerConstructor.ChannelManagerPersister channel_manager_persister =\n    new YourObj();\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Dependencies:")," ",Object(i.b)("em",{parentName:"p"},"none")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Implementation notes:")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"See References for an integrated example of handling LDK events (in Rust)"),Object(i.b)("li",{parentName:"ul"},"It's important to read the documentation (linked in References) for each event\nto make sure you satisfy the API requirements for handling it")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"References:")," ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/lightningdevkit/ldk-sample/blob/bc07db6ca4a3323d8718a27f85182b8157a20750/src/main.rs#L101-L240"}),"Example of handling LDK events in Rust"),",\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.rs/lightning/*/lightning/util/events/enum.Event.html"}),"Rust docs for LDK events")),Object(i.b)("h3",{id:"7-optional-initialize-the-transaction-filter"},"7. Optional: Initialize the Transaction ",Object(i.b)("inlineCode",{parentName:"h3"},"Filter")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"You must follow this step if:")," you are ",Object(i.b)("em",{parentName:"p"},"not")," providing full blocks to LDK,\ni.e. if you're using BIP 157/158 or Electrum as your chain backend"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"What it's used for:")," if you are not providing full blocks, LDK uses this\nobject to tell you what transactions and outputs to watch for on-chain. You'll\ninform LDK about these transactions/outputs in Step 14."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"Filter tx_filter = Filter.new_impl(new Filter.FilterInterface() {\n    @Override\n    public void register_tx(byte[] txid, byte[] script_pubkey) {\n        // <insert code for you to watch for this transaction on-chain>\n    }\n\n    @Override\n    public Option_C2Tuple_usizeTransactionZZ register_output(WatchedOutput output)\n    {\n        // <insert code for you to watch for any transactions that spend this\n        //  output on-chain>\n    }\n});\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Implementation notes:")," see the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/blockdata"}),"Blockchain Data")," guide for more info"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Dependencies:")," ",Object(i.b)("em",{parentName:"p"},"none")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"References:")," ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.rs/lightning/*/lightning/chain/trait.Filter.html"}),"Rust docs"),", ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/lightningdevkit/ldk-garbagecollected/blob/main/src/main/java/org/ldk/structs/Filter.java"}),"Java bindings"),", ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/blockdata"}),"Blockchain Data guide")),Object(i.b)("h3",{id:"8-initialize-the-chainmonitor"},"8. Initialize the ",Object(i.b)("inlineCode",{parentName:"h3"},"ChainMonitor")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"What it's used for:")," monitoring the chain for lighting transactions that are relevant to our node, and broadcasting transactions if need be"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"final filter = // leave this as `null` or insert the Filter object, depending on\n               // what you did for Step 7\nfinal chain_monitor = ChainMonitor.of(filter, tx_broadcaster, logger,\n    fee_estimator, persister);\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Dependencies:")," ",Object(i.b)("inlineCode",{parentName:"p"},"FeeEstimator"),", ",Object(i.b)("inlineCode",{parentName:"p"},"Logger"),", ",Object(i.b)("inlineCode",{parentName:"p"},"BroadcasterInterface"),", ",Object(i.b)("inlineCode",{parentName:"p"},"Persist")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Optional dependency:")," ",Object(i.b)("inlineCode",{parentName:"p"},"Filter")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"References:")," ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.rs/lightning/*/lightning/chain/chainmonitor/struct.ChainMonitor.html"}),"Rust docs"),", ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/lightningdevkit/ldk-garbagecollected/blob/main/src/main/java/org/ldk/structs/ChainMonitor.java"}),"Java bindings")),Object(i.b)("h3",{id:"9-initialize-the-keysmanager"},"9. Initialize the ",Object(i.b)("inlineCode",{parentName:"h3"},"KeysManager")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"What it's used for:")," providing keys for signing lightning transactions"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"byte[] key_seed = new byte[32];\n// <insert code to fill key_seed with random bytes OR if restarting, reload the\n// seed from disk>\nKeysManager keys_manager = KeysManager.of(key_seed,\n    System.currentTimeMillis() / 1000,\n    (int) (System.currentTimeMillis() * 1000));\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Implementation notes:")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"See the ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/key_mgmt"}),"Key Management")," guide for more info"),Object(i.b)("li",{parentName:"ul"},"Note that you must write the ",Object(i.b)("inlineCode",{parentName:"li"},"key_seed")," you give to the ",Object(i.b)("inlineCode",{parentName:"li"},"KeysManager")," on\nstartup to disk, and keep using it to initialize the ",Object(i.b)("inlineCode",{parentName:"li"},"KeysManager")," every time\nyou restart. This ",Object(i.b)("inlineCode",{parentName:"li"},"key_seed")," is used to derive your node's secret key (which\ncorresponds to its node pubkey) and all other secret key material."),Object(i.b)("li",{parentName:"ul"},"The current time is part of the ",Object(i.b)("inlineCode",{parentName:"li"},"KeysManager"),"'s parameters because it is used to derive\nrandom numbers from the seed where required, to ensure all random\ngeneration is unique across restarts.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Dependencies:")," random bytes"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"References:")," ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.rs/lightning/*/lightning/chain/keysinterface/struct.KeysManager.html"}),"Rust docs"),", ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/lightningdevkit/ldk-garbagecollected/blob/main/src/main/java/org/ldk/structs/KeysManager.java"}),"Java bindings"),", ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/key_mgmt"}),"Key Management guide")),Object(i.b)("h3",{id:"10-read-channelmonitors-from-disk"},"10. Read ",Object(i.b)("inlineCode",{parentName:"h3"},"ChannelMonitor"),"s from disk"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"What it's used for:")," if LDK is restarting and has at least 1 channel, its channel state will need to be read from disk and fed to the ",Object(i.b)("inlineCode",{parentName:"p"},"ChannelManager")," on the next step."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")," reading ",Object(i.b)("inlineCode",{parentName:"p"},"ChannelMonitor"),"s from disk, where each ",Object(i.b)("inlineCode",{parentName:"p"},"ChannelMonitor"),"'s file is named after its funding outpoint:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"// Initialize the array where we'll store the `ChannelMonitor`s read from disk.\nfinal ArrayList channel_monitor_list = new ArrayList<>();\n\n// For each monitor stored on disk, deserialize it and place it in \n// `channel_monitors`.\nfor (... : monitor_files) {\n    byte[] channel_monitor_bytes = // read the bytes from disk the same way you\n                                   // wrote them in Step 5\n    channel_monitor_list.add(channel_monitor_bytes);\n}\n\n// Convert the ArrayList into an array so we can pass it to\n// `ChannelManagerConstructor` in Step 11.\nfinal byte[][] channel_monitors = (byte[][])channel_monitor_list.toArray(new byte[1][]);\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Dependencies:")," ",Object(i.b)("em",{parentName:"p"},"none")),Object(i.b)("h3",{id:"11-initialize-the-channelmanager"},"11. Initialize the ",Object(i.b)("inlineCode",{parentName:"h3"},"ChannelManager")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"What it's used for:")," managing channel state"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"/* FRESH CHANNELMANAGER */\n\nint block_height = // <insert current chain tip height>;\nbyte[] best_block_hash = // <insert current chain tip block hash>;\nChannelManagerConstructor channel_manager_constructor = new ChannelManagerConstructor(\n  LDKNetwork.LDKNetwork_Bitcoin, UserConfig.default(), best_block_hash,\n  block_height, keys_manager.as_KeysInterface(), fee_estimator, chain_monitor,\n  router, tx_broadcaster, logger);\n\n/* RESTARTING CHANNELMANAGER */\n\nbyte[] serialized_channel_manager = // <insert bytes as written to disk in Step 6>\nChannelManagerConstructor channel_manager_constructor = new ChannelManagerConstructor(\n  serialized_channel_manager, channel_monitors, keys_manager.as_KeysInterface(),\n  fee_estimator, chain_monitor, filter, router, tx_broadcaster, logger);\n\nfinal ChannelManager channel_manager = channel_manager_constructor.channel_manager;\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Implementation notes:")," No methods should be called on ",Object(i.b)("inlineCode",{parentName:"p"},"ChannelManager")," until\n",Object(i.b)("em",{parentName:"p"},"after")," Step 12."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Dependencies:")," ",Object(i.b)("inlineCode",{parentName:"p"},"KeysManager"),", ",Object(i.b)("inlineCode",{parentName:"p"},"FeeEstimator"),", ",Object(i.b)("inlineCode",{parentName:"p"},"ChainMonitor"),", ",Object(i.b)("inlineCode",{parentName:"p"},"BroadcasterInterface"),", ",Object(i.b)("inlineCode",{parentName:"p"},"Logger"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"ChannelMonitor"),"s and ",Object(i.b)("inlineCode",{parentName:"p"},"ChannelManager")," bytes from Step 10 and Step 6 respectively, if restarting"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Optional dependencies:")," ",Object(i.b)("inlineCode",{parentName:"p"},"Filter"),", ",Object(i.b)("inlineCode",{parentName:"p"},"NetGraphMsgHandler")," (can be left as ",Object(i.b)("inlineCode",{parentName:"p"},"null")," if you're not providing them)"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"References:")," ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.rs/lightning/*/lightning/ln/channelmanager/struct.ChannelManager.html"}),"Rust ",Object(i.b)("inlineCode",{parentName:"a"},"ChannelManager")," docs"),", ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/lightningdevkit/ldk-garbagecollected/blob/main/src/main/java/org/ldk/structs/ChannelManager.java"}),"Java ",Object(i.b)("inlineCode",{parentName:"a"},"ChannelManager")," bindings")),Object(i.b)("h3",{id:"12-sync-channelmonitors-and-channelmanager-to-chain-tip"},"12. Sync ",Object(i.b)("inlineCode",{parentName:"h3"},"ChannelMonitor"),"s and ",Object(i.b)("inlineCode",{parentName:"h3"},"ChannelManager")," to chain tip"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"What it's used for:")," this step is only necessary if you're restarting and have open channels. This step ensures that LDK channel state is up-to-date with the bitcoin blockchain"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")," with Electrum backend"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"// Retrieve transaction IDs to check the chain for un-confirmation.\nbyte[][] relevant_txids_1 = channel_manager.as_Confirm().get_relevant_txids();\nbyte[][] relevant_txids_2 = chain_monitor.as_Confirm().get_relevant_txids();\nbyte[][] relevant_txids = ArrayUtils.addAll(relevant_txids_1, relevant_txids_2);\n\nbyte[][] unconfirmed_txids = // <insert code to find out from your chain source\n                             //  if any of relevant_txids have been reorged out\n                             //  of the chain>\n\nfor (byte[] txid : unconfirmed_txids) {\n    channel_manager.transaction_unconfirmed(txid);\n    chain_monitor.transaction_unconfirmed(txid);\n}\n\n// Retrieve transactions and outputs that were registered through the `Filter`\n// interface.\n\n// If any of these txs/outputs were confirmed on-chain, then:\nbyte[] header = // insert block header from the block with confirmed tx/output\nint height = // insert block height of `header`\nLong tx_index = // insert tx index in block\nbyte[] serialized_tx = // insert tx hex as byte array\nTwoTuple<Long, byte[]> tx = new TwoTuple<>(tx_index, serialized_tx);\n\n// Marshall all TwoTuples you built right above into an array\nTwoTuple<Long, byte[]>[] tx_list = new TwoTuple[]{tx, .. };\n\nchannel_manager.transactions_confirmed(header, height, tx_list);\nchain_monitor.transactions_confirmed(header, height, tx_list);\n\nbyte[] best_header = // <insert code to get your best known header>\nint best_height = // <insert code to get your best known block height>\nchannel_manager.update_best_block(best_header, best_height);\nchain_monitor.update_best_block(best_header, best_height);\n\n// Finally, tell LDK that chain sync is complete. This will also spawn several\n// background threads to handle networking and event processing.\nchannel_manager_constructor.chain_sync_completed(channel_manager_persister);\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Implementation notes:")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"There are 2 main options for synchronizing to chain on startup:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"If you are connecting full blocks or using BIP 157/158: the high-level steps that must be done for both ",Object(i.b)("inlineCode",{parentName:"p"},"ChannelManager")," and each ",Object(i.b)("inlineCode",{parentName:"p"},"ChannelMonitor")," are as follows:"),Object(i.b)("ol",{parentName:"li"},Object(i.b)("li",{parentName:"ol"},"Get the last blockhash that each object saw. ")),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ChannelManager"),"'s is in ",Object(i.b)("inlineCode",{parentName:"li"},"channel_manager_constructor.channel_manager_latest_block_hash")),Object(i.b)("li",{parentName:"ul"},"Each ",Object(i.b)("inlineCode",{parentName:"li"},"ChannelMonitor"),"'s is in ",Object(i.b)("inlineCode",{parentName:"li"},"channel_manager_constructor.channel_monitors"),", as the 2nd element in each tuple")),Object(i.b)("ol",Object(a.a)({parentName:"li"},{start:2}),Object(i.b)("li",{parentName:"ol"},"For each object, if its latest known blockhash has been reorged out of the chain, then disconnect blocks using ",Object(i.b)("inlineCode",{parentName:"li"},"channel_manager.as_Listen().block_disconnected(..)")," or ",Object(i.b)("inlineCode",{parentName:"li"},"channel_monitor.block_disconnected(..)")," until you reach the last common ancestor with the main chain."),Object(i.b)("li",{parentName:"ol"},"For each object, reconnect blocks starting from the common ancestor until it gets to your best known chain tip using ",Object(i.b)("inlineCode",{parentName:"li"},"channel_manager.as_Listen().block_connected(..)")," and/or ",Object(i.b)("inlineCode",{parentName:"li"},"channel_monitor.block_connected(..)"),"."),Object(i.b)("li",{parentName:"ol"},"Call ",Object(i.b)("inlineCode",{parentName:"li"},"channel_manager_constructor.chain_sync_completed(..)")," to complete the initial sync process."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Otherwise, you can use LDK's ",Object(i.b)("inlineCode",{parentName:"p"},"Confirm")," interface as in the example above. The high-level steps are as follows:"),Object(i.b)("ol",{parentName:"li"},Object(i.b)("li",{parentName:"ol"},"Tell LDK about relevant confirmed and unconfirmed transactions."),Object(i.b)("li",{parentName:"ol"},"Tell LDK what your best known block header and height is."),Object(i.b)("li",{parentName:"ol"},"Call ",Object(i.b)("inlineCode",{parentName:"li"},"channel_manager_constructor.chain_sync_completed(..)")," to complete the initial sync process."))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"More details about LDK's interfaces to provide chain info in Step 14."))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"References:")," ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.rs/lightning/*/lightning/chain/trait.Listen.html"}),"Rust ",Object(i.b)("inlineCode",{parentName:"a"},"Listen")," docs"),", ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.rs/lightning/*/lightning/chain/trait.Confirm.html"}),"Rust ",Object(i.b)("inlineCode",{parentName:"a"},"Confirm")," docs")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Dependencies:")," ",Object(i.b)("inlineCode",{parentName:"p"},"ChannelManager"),", ",Object(i.b)("inlineCode",{parentName:"p"},"ChainMonitor")),Object(i.b)("h3",{id:"13-optional-bind-a-listening-port"},"13. Optional: Bind a Listening Port"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"You must follow this step if:")," you want to listen for incoming peer connections"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"What it's used for:")," accepting incoming peer connections"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'final NioPeerHandler nio_peer_handler = channel_manager_constructor.nio_peer_handler;\nfinal int port = 9735;\nnio_peer_handler.bind_listener(new InetSocketAddress("0.0.0.0", port));\n')),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Dependencies:")," ",Object(i.b)("inlineCode",{parentName:"p"},"ChannelManagerConstructor")," (",Object(i.b)("em",{parentName:"p"},"after")," ",Object(i.b)("inlineCode",{parentName:"p"},"chain_sync_completed(..)")," has been called on it)"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"References:")," ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/lightningdevkit/ldk-garbagecollected/blob/main/src/main/java/org/ldk/batteries/NioPeerHandler.java"}),"Java ",Object(i.b)("inlineCode",{parentName:"a"},"NioPeerHandler")," sample networking module")),Object(i.b)("h2",{id:"running-ldk"},"Running LDK"),Object(i.b)("p",null,"This section assumes you've already run all the steps in ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#setup"}),"Setup"),"."),Object(i.b)("h3",{id:"14-keep-ldk-up-to-date-with-chain-info"},"14. Keep LDK Up-to-date with Chain Info"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"What it's used for:")," LDK needs to know when blocks are newly connected and disconnected and when relevant transactions are confirmed and/or reorged out."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)(o.a,{defaultValue:"java-blocks",values:[{label:"Java with Full Blocks or BIP 157/158",value:"java-blocks"},{label:"Java with Electrum",value:"java-electrum"}],mdxType:"Tabs"},Object(i.b)(c.a,{value:"java-electrum",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"/* UNCONFIRMED TRANSACTIONS */\n\n// Retrieve transaction IDs to check the chain for un-confirmation.\nbyte[][] relevant_txids_1 = channel_manager.as_Confirm().get_relevant_txids();\nbyte[][] relevant_txids_2 = chain_monitor.as_Confirm().get_relevant_txids();\nbyte[][] relevant_txids = ArrayUtils.addAll(\n    relevant_txids_1, relevant_txids_2\n);\n\n// If any txids `relevant_txids` gets reorged out, you must call:\nchannel_manager.as_Listen().transaction_unconfirmed(unconfirmed_txid);\nchain_monitor.transaction_unconfirmed(unconfirmed_txid);\n\n/* CONFIRMED TRANSACTIONS */\n\n// Retrieve transactions and outputs to check the chain for confirmation.\n// These should've been given to you for monitoring via the `Filter` interface.\n\n// If any transactions or output spends appear on-chain, you must call:\nchannel_manager.as_Listen().transactions_confirmed(\n    header, height, confirmed_txs_list);\nchain_monitor.transactions_confirmed(header, height, confirmed_txs_list);\n\n/* CONNECTED OR DISCONNECTED BLOCKS */\n\n// Whenever there's a new chain tip or a block has been newly disconnected, you\n// must call:\nchannel_manager.update_best_block(new_best_header, new_best_height);\nchain_monitor.update_best_block(new_best_header, new_best_height);\n"))),Object(i.b)(c.a,{value:"java-blocks",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"// For each connected and disconnected block, and in chain-order, call these\n// methods.\n// If you're using BIP 157/158, then `txdata` below should always include any\n// transactions and/our outputs spends registered through the `Filter` interface,\n// Transactions and outputs are registered both on startup and as new relevant\n// transactions/outputs are created.\n\n// header is a []byte type, height is `int`, txdata is a \n// TwoTuple<Long, byte[]>[], where the 0th element is the transaction's position \n// in the block (with the coinbase transaction considered position 0) and the 1st \n// element is the transaction bytes\nchannel_manager.as_Listen().block_connected(header, txdata, height);\nchain_monitor.block_connected(header, txdata, height);\n\nchannel_manager.as_Listen().block_disconnected(header, height);\nchain_monitor.block_disconnected(header, height);\n")))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Implementation notes:")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"If you're using the ",Object(i.b)("inlineCode",{parentName:"li"},"Listen")," interface: blocks must be connected and disconnected in chain order"),Object(i.b)("li",{parentName:"ul"},"If you're using the ",Object(i.b)("inlineCode",{parentName:"li"},"Confirm")," interface: it's important to read the ",Object(i.b)("inlineCode",{parentName:"li"},"Confirm")," docs linked in References, to make sure you satisfy the interface's requirements")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Dependencies:")," ",Object(i.b)("inlineCode",{parentName:"p"},"ChannelManager"),", ",Object(i.b)("inlineCode",{parentName:"p"},"ChainMonitor")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"References:")," ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.rs/lightning/*/lightning/chain/trait.Listen.html"}),"Rust ",Object(i.b)("inlineCode",{parentName:"a"},"Listen")," docs"),", ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.rs/lightning/*/lightning/chain/trait.Confirm.html"}),"Rust ",Object(i.b)("inlineCode",{parentName:"a"},"Confirm")," docs")),Object(i.b)("h2",{id:"using-ldk"},"Using LDK"),Object(i.b)("p",null,"This section assumes you've followed the steps of the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#setup"}),"Setup")," and ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#running-ldk"}),"Running LDK"),"."),Object(i.b)("h3",{id:"opening-a-channel"},"Opening a Channel"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'// <insert code to connect to peer via\n// NioPeerHandler.connect(byte[] their_node_id, SocketAddress remote)>\n\n// Create the initial channel of 10000 sats with a push_msat of 1000 and make\n// sure the result is successful. The `42` here can be any value, and it is not\n// used internally in LDK. It will be provided back to you in the\n// `Event.FundingGenerationReady` event as `user_channel_id`.\nbyte[] peer_node_pubkey = <peer node pubkey bytes>;\nResult_NoneAPIErrorZ create_channel_result = channel_manager.create_channel(\n    peer_node_pubkey, 10000, 1000, 42, null);\nassert create_channel_result instanceof Result_NoneAPIErrorZ.Result_NoneAPIErrorZ_OK;\n\n// After the peer responds with an `accept_channel` message, an\n// Event.FundingGenerationReady event will be generated.\n\n// In the `handle_event` function created in the\n// "Initialize the `ChannelManagerPersister`" section above),\n// the FundingGenerationReady event should be handled to create a funding tx.\nif (e instanceof Event.FundingGenerationReady) {\n    byte[] funding_scriptpubkey = ((Event.FundingGenerationReady) e).output_script;\n    long output_value = ((Event.FundingGenerationReady) e).channel_value_satoshis;\n    // This is the same channel we just created, above:\n    assert ((Event.FundingGenerationReady) e).user_channel_id == 42;\n    // The output is always a P2WSH:\n    assert funding_scriptpubkey.length == 34 && funding_scriptpubkey[0] == 0 &&\n        funding_scriptpubkey[1] == 32;\n\n    // Generate the funding transaction for the channel based on the channel amount\n    // The following uses the bitcoinj library to do so, but you can use any\n    // standard Bitcoin library for on-chain logic.\n    NetworkParameters bitcoinj_net =\n        NetworkParameters.fromID(NetworkParameters.ID_MAINNET);\n    Transaction funding_tx = new Transaction(bitcoinj_net);\n    funding_tx.addInput(new TransactionInput(bitcoinj_net, funding, new byte[0]));\n    // Note that all inputs in the funding transaction MUST spend SegWit outputs\n    // (and have witnesses)\n    funding_tx.getInputs().get(0).setWitness(new TransactionWitness(2));\n    funding_tx.getInput(0).getWitness().setPush(0, new byte[]{0x1});\n    funding_tx.addOutput(Coin.SATOSHI.multiply(output_value),\n        new Script(funding_scriptpubkey));\n\n    // Give the funding transaction back to the ChannelManager.\n    byte[] chan_id = ((Event.FundingGenerationReady) e).temporary_channel_id;\n    Result_NoneAPIErrorZ funding_res =\n        channel_manager.funding_transaction_generated(chan_id,\n            funding_tx.bitcoinSerialize());\n    // funding_transaction_generated should only generate an error if the\n    // transaction didn\'t meet the required format (or the counterparty already\n    // closed the channel on us):\n    assert funding_res instanceof Result_NoneAPIErrorZ.Result_NoneAPIErrorZ_OK;\n\n    // At this point LDK will exchange the remaining channel open messages with\n    // the counterparty and, when appropriate, broadcast the funding transaction\n    // provided.\n    // Once it confirms, the channel will be open and available for use (indicated\n    // by its presence in `channel_manager.list_usable_channels()`).\n}\n')),Object(i.b)("h3",{id:"closing-a-channel"},"Closing a Channel"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")," cooperative close"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"// Assuming 1 open channel\nbyte[] channel_id = channel_manager.list_channels()[0].get_channel_id();\nResult_NoneAPIErrorZ close_result = channel_manager.close_channel(\n    channel_id);\nassert close_result instanceof Result_NoneAPIErrorZ.Result_NoneAPIErrorZ_OK;\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")," force/unilateral close"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"// Assuming 1 open channel\nbyte[] channel_id = channel_manager.list_channels()[0].get_channel_id();\nResult_NoneAPIErrorZ channel_manager.force_close_channel(channel_id);\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Dependencies:")," ",Object(i.b)("inlineCode",{parentName:"p"},"ChannelManager"),", ",Object(i.b)("inlineCode",{parentName:"p"},"NioPeerHandler")),Object(i.b)("h3",{id:"list-channels"},"List Channels"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"ChannelDetails[] channels = channel_manager.list_channels();\n")),Object(i.b)("h3",{id:"receiving-payments"},"Receiving Payments"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'Result_InvoiceSignOrCreationErrorZ invoice = UtilMethods.invoice_from_channelmanager(\n    channel_manager, keys_manager.as_KeysInterface(), LDKCurrency.LDKCurrency_Bitcoin,\n    Option_u64Z.none(), "Invoice Description");\nassert invoice instanceof\n    Result_InvoiceSignOrCreationErrorZ.Result_InvoiceSignOrCreationErrorZ_OK;\nInvoice invoice = ((Result_InvoiceSignOrCreationErrorZ.Result_InvoiceSignOrCreationErrorZ_OK) invoice).res;\nString invoice_string = invoice.to_str();\n')),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Implementation notes:"),"\nUnless a ",Object(i.b)("inlineCode",{parentName:"p"},"payment_secret")," and ",Object(i.b)("inlineCode",{parentName:"p"},"payment_hash")," is registered with the\n",Object(i.b)("inlineCode",{parentName:"p"},"ChannelManager")," via ",Object(i.b)("inlineCode",{parentName:"p"},"create_inbound_payment")," or ",Object(i.b)("inlineCode",{parentName:"p"},"create_inbound_payment_for_hash"),",\nLDK will automatically reject incoming HTLCs to protect your privacy.\n",Object(i.b)("inlineCode",{parentName:"p"},"UtilMethods.invoice_from_channelmanager")," automatically calls\n",Object(i.b)("inlineCode",{parentName:"p"},"create_inbound_payment")," for you, generating an invoice and a pending payment\nall at once."),Object(i.b)("h3",{id:"sending-payments"},"Sending Payments"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"String invoice_str = // get an invoice from the payee\nResult_InvoiceNoneZ parsed_invoice = invoice_str.from_str();\n\nif (parsed_invoice instanceof Result_InvoiceNoneZ.Result_InvoiceNoneZ_OK) {\n    Invoice invoice = ((Result_InvoiceNoneZ.Result_InvoiceNoneZ_OK) parsed_invoice).res;\n    long amt = 0;\n    if (invoice.amount_pico_btc() instanceof Option_u64Z.Some) {\n        amt = ((Option_u64Z.Some)invoice.amount_pico_btc()).some;\n    }\n    if (amt == 0) {\n        // <Handle a zero-value invoice>\n    }\n\n    // LDK currently only supports one-hop route hints, so we need to select\n    // only the last hops, potentially not using any longer hints.\n    ArrayList<RouteHintHop> invoice_hops = new ArrayList<RouteHintHop>();\n    for (RouteHint hint : invoice.res.routes()) {\n            RouteHintHop[] hops = hint.into_inner();\n            invoice_hops.add(hops[hops.length - 1]);\n    }\n\n    Route route;\n    try (LockedNetworkGraph netgraph = router.read_locked_graph()) {\n        NetworkGraph graph = netgraph.graph();\n        Result_RouteLightningErrorZ route_res = UtilMethods.get_route(chan_manager.get_our_node_id(),\n            graph, invoice.recover_payee_pub_key(), invoice.features(),\n            channel_manager.list_usable_channels(), invoice_hops.toArray(new RouteHintHop[0]), amt,\n            invoice.min_final_cltv_expiry(), logger);\n        assert route_res instanceof Result_RouteLightningErrorZ.Result_RouteLightningErrorZ_OK;\n        route = ((Result_RouteLightningErrorZ.Result_RouteLightningErrorZ_OK) route_res).res;\n    }\n\n    Result_NonePaymentSendFailureZ payment_res = peer1.chan_manager.send_payment(route, invoice.payment_hash(),\n            invoice.payment_secret());\n    assert payment_res instanceof Result_NonePaymentSendFailureZ.Result_NonePaymentSendFailureZ_OK;\n}\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Dependencies:")," ",Object(i.b)("inlineCode",{parentName:"p"},"ChannelManager"),", ",Object(i.b)("inlineCode",{parentName:"p"},"NetGraphMsgHandler")),Object(i.b)("h3",{id:"connect-to-peers"},"Connect to Peers"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"byte[] peer_pubkey = // insert peer's pubkey bytes\nint peer_port = 9735; // replace this with the peer's port number\nString peer_host = \"192.168.1.2\"; // replace this with the peer's host\nSocketAddress peer_socket_addr = new InetSocketAddress(peer_host, peer_port);\nnio_peer_handler.connect(peer_pubkey, peer_socket_address);\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Dependencies:")," ",Object(i.b)("inlineCode",{parentName:"p"},"PeerManager"),", peer's pubkey/host/port"),Object(i.b)("h3",{id:"list-peers"},"List Peers"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"byte[][] peer_node_ids = peer_manager.get_peer_node_ids();\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Dependencies:")," ",Object(i.b)("inlineCode",{parentName:"p"},"PeerManager")))}d.isMDXComponent=!0},85:function(e,n,t){"use strict";function a(e){var n,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=a(e[n]))&&(r&&(r+=" "),r+=t);else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}n.a=function(){for(var e,n,t=0,r="";t<arguments.length;)(e=arguments[t++])&&(n=a(e))&&(r&&(r+=" "),r+=n);return r}},87:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return u}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),b=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=b(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},h=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=b(t),h=a,u=p["".concat(o,".").concat(h)]||p[h]||d[h]||i;return t?r.a.createElement(u,c(c({ref:n},s),{},{components:t})):r.a.createElement(u,c({ref:n},s))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=h;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=t[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},93:function(e,n,t){"use strict";var a=t(0),r=t(94);n.a=function(){const e=Object(a.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},94:function(e,n,t){"use strict";var a=t(0);const r=Object(a.createContext)(void 0);n.a=r},99:function(e,n,t){"use strict";var a=t(0),r=t.n(a),i=t(93),o=t(85),c=t(53),l=t.n(c);const s=37,b=39;n.a=function(e){const{lazy:n,block:t,defaultValue:c,values:p,groupId:d,className:h}=e,{tabGroupChoices:u,setTabGroupChoices:m}=Object(i.a)(),[g,O]=Object(a.useState)(c),j=a.Children.toArray(e.children);if(null!=d){const e=u[d];null!=e&&e!==g&&p.some((n=>n.value===e))&&O(e)}const _=e=>{O(e),null!=d&&m(d,e)},f=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(o.a)("tabs",{"tabs--block":t},h)},p.map((({value:e,label:n})=>r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":g===e,className:Object(o.a)("tabs__item",l.a.tabItem,{"tabs__item--active":g===e}),key:e,ref:e=>f.push(e),onKeyDown:e=>{((e,n,t)=>{switch(t.keyCode){case b:((e,n)=>{const t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()})(e,n);break;case s:((e,n)=>{const t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()})(e,n)}})(f,e.target,e)},onFocus:()=>_(e),onClick:()=>{_(e)}},n)))),n?Object(a.cloneElement)(j.filter((e=>e.props.value===g))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},j.map(((e,n)=>Object(a.cloneElement)(e,{key:n,hidden:e.props.value!==g})))))}}}]);