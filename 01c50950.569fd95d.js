(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{62:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return l}));var a=t(3),r=t(7),i=(t(0),t(88)),o={id:"key_mgmt",title:"Key Management"},c={unversionedId:"key_mgmt",id:"key_mgmt",isDocsHomePage:!1,title:"Key Management",description:"Relevant reference: Rust docs",source:"@site/docs/key_mgmt.md",slug:"/key_mgmt",permalink:"/docs/key_mgmt",editUrl:"https://github.com/lightningdevkit/lightningdevkit.org/tree/main/docs/key_mgmt.md",version:"current",sidebar:"someSidebar",previous:{title:"Using LDK",permalink:"/docs/using_ldk"},next:{title:"Blockchain Data",permalink:"/docs/blockdata"}},s=[],p={toc:s};function l(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Relevant reference: ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.rs/lightning/*/lightning/chain/keysinterface/struct.KeysManager.html"}),"Rust docs")),Object(i.b)("p",null,"LDK Private Key Information is primarily provided through the ",Object(i.b)("inlineCode",{parentName:"p"},"chain::keysinterface::KeysInterface")," trait. It includes a few basic methods to get public and private key information, as well as a method to get an instance of a second trait which provides per-channel information - ",Object(i.b)("inlineCode",{parentName:"p"},"chain::keysinterface::ChannelKeys"),". While a custom ",Object(i.b)("inlineCode",{parentName:"p"},"KeysInterface")," implementation allows simple flexibility to control derivation of private keys, ",Object(i.b)("inlineCode",{parentName:"p"},"ChannelKeys")," focuses on signing lightning transactions and is primarily useful if you want to store private key material on a separate device which enforces lightning protocol details."),Object(i.b)("p",null,"A simple implementation of ",Object(i.b)("inlineCode",{parentName:"p"},"KeysInterface")," is provided in the form of ",Object(i.b)("inlineCode",{parentName:"p"},"chain::keysinterface::KeysManager"),", see its documentation for more details on its key derivation. It uses ",Object(i.b)("inlineCode",{parentName:"p"},"chain::keysinterface::InMemoryChannelKeys")," for channel signing, which is likely an appropriate signer for custom ",Object(i.b)("inlineCode",{parentName:"p"},"KeysInterface")," implementations as well."),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"KeysManager")," can be constructed simply with only a 32-byte seed and some integers which ensure uniqueness across restarts (defined as ",Object(i.b)("inlineCode",{parentName:"p"},"starting_time_secs")," and ",Object(i.b)("inlineCode",{parentName:"p"},"starting_time_nanos"),")."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),"let mut random_32_bytes = [0; 32];\n// Fill in random_32_bytes with secure random data, or, on restart, reload the seed from disk.\nlet start_time = SystemTime::now().duration_since(SystemTime::UNIX_EPOCH).unwrap();\nlet keys_interface_impl = lightning::chain::keysinterface::KeysManager::new(random_32-bytes, start_time.as_secs(), start_time.subsec_nanos());\n")),Object(i.b)("h1",{id:"spending-on-chain-funds"},"Spending On-Chain Funds"),Object(i.b)("p",null,"When a channel has been closed and some outputs on chain are spendable only by us, LDK provides a ",Object(i.b)("inlineCode",{parentName:"p"},"util::events::Event::SpendableOutputs")," event in return from ",Object(i.b)("inlineCode",{parentName:"p"},"ChannelMonitor::get_and_clear_pending_events()"),". It contains a list of ",Object(i.b)("inlineCode",{parentName:"p"},"chain::keysinterface::SpendableOutputDescriptor")," objects which describe the output and provide all necessary information to spend it. ",Object(i.b)("inlineCode",{parentName:"p"},"ChannelKeys")," objects provide a unique id via the ",Object(i.b)("inlineCode",{parentName:"p"},"key_derivation_params")," function, who's value is provided back to you in the ",Object(i.b)("inlineCode",{parentName:"p"},"SpendableOutputs")," objects. For users of a ",Object(i.b)("inlineCode",{parentName:"p"},"KeysManager")," object, you can re-construct the ",Object(i.b)("inlineCode",{parentName:"p"},"InMemoryChannelKeys")," object using this information and fetch the relevant private keys from that. A ",Object(i.b)("inlineCode",{parentName:"p"},"SpendableOutputDescriptor::StaticOutput")," element does not have this information as the output is sent to an output which used only ",Object(i.b)("inlineCode",{parentName:"p"},"KeysInterface")," data, not per-channel data."))}l.isMDXComponent=!0},88:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return b}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=r.a.createContext({}),l=function(e){var n=r.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=l(e.components);return r.a.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),m=a,b=u["".concat(o,".").concat(m)]||u[m]||d[m]||i;return t?r.a.createElement(b,c(c({ref:n},p),{},{components:t})):r.a.createElement(b,c({ref:n},p))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var p=2;p<i;p++)o[p]=t[p];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);